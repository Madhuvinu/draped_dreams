import{A as l}from"./index-7c8e1384.js";const d=()=>{const c=document.querySelector('meta[name="csrf-token"]');if(c)return c.getAttribute("content");const o=document.cookie.split(";");for(let e of o){const[s,n]=e.trim().split("=");if(s==="csrf_token")return n}return null};class m{constructor(){const o=window.location.protocol,e=window.location.hostname,s=window.location.port;e==="localhost"||e==="127.0.0.1"?this.baseUrl=`${o}//${e}:8000`:this.baseUrl=`${o}//${e}${s?":"+s:""}`,this.csrfToken=null}async fetchCSRFToken(){try{const e=await(await fetch(`${this.baseUrl}/api/method/draped_dreams.api.auth.get_csrf_token`,{method:"GET",credentials:"include"})).json();if(console.log("CSRF token response:",e),e.message&&e.message.success&&e.message.csrf_token)return this.csrfToken=e.message.csrf_token,console.log("CSRF token set:",this.csrfToken),this.csrfToken}catch(o){console.error("Error fetching CSRF token:",o)}return null}async makeRequest(o,e={}){try{let s=this.csrfToken||d();s||(s=await this.fetchCSRFToken());const n={...l.HEADERS.JSON,...e.headers},i=window.location.hostname!=="localhost"&&window.location.hostname!=="127.0.0.1"&&!window.location.hostname.includes("localhost");s&&!i?(n["X-Frappe-CSRF-Token"]=s,console.log("üîê CSRF token added for development")):i&&console.log("üåê Production mode - CSRF token disabled for testing");let r;o.startsWith("/api/method/")?r=`${this.baseUrl}${o}`:r=`${this.baseUrl}/api/method/${o}`,console.log("Making API request to:",r),console.log("Request options:",{method:e.method||"GET",headers:n,body:e.body,credentials:"include"});const t=await fetch(r,{...e,headers:n,credentials:"include"});if(!t.ok&&t.status===400&&s&&(console.log("CSRF token may have expired, fetching new one..."),this.csrfToken=null,s=await this.fetchCSRFToken(),s)){n["X-Frappe-CSRF-Token"]=s;const a=await fetch(r,{...e,headers:n,credentials:"include"});if(a.ok)return await a.json()}if(!t.ok){const a=await t.text();throw console.log("‚ùå Server Error Response:",a),console.log("‚ùå Response Status:",t.status),console.log("‚ùå Response Headers:",t.headers),new Error(`HTTP ${t.status}: ${t.statusText}`)}return await t.json()}catch(s){throw console.error("API Request Error:",s),s}}handleResponse(o,e="Operation successful"){var s;return o.message&&o.message.success?{success:!0,message:o.message.message||e,data:o.message.data}:{success:!1,message:((s=o.message)==null?void 0:s.message)||"Operation failed"}}}export{m as B};
