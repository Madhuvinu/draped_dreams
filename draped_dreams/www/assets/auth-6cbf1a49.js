import{S as m,E as i,V as c}from"./index-7c8e1384.js";class u{constructor(){this.baseUrl=this.getBaseUrl()}getBaseUrl(){const e=window.location.protocol,s=window.location.hostname,a=window.location.port;return s==="localhost"||s==="127.0.0.1"?`${e}//${s}:8000`:`${e}//${s}${a?":"+a:""}`}async register(e){var s,a,r;try{const o=new URLSearchParams;Object.keys(e).forEach(l=>{o.append(l,e[l])});const t=`${this.baseUrl}/api/method/draped_dreams.api.auth.register_user`;console.log("🚀 Direct registration to:",t),console.log("📦 Form data:",o.toString());const n=await fetch(t,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:o,credentials:"include"});if(console.log("📊 Response status:",n.status),!n.ok){const l=await n.text();throw console.log("❌ Error:",l),new Error(`HTTP ${n.status}: ${n.statusText}`)}const g=await n.json();return console.log("✅ Success:",g),{success:((s=g.message)==null?void 0:s.success)||!1,message:((a=g.message)==null?void 0:a.message)||"Registration completed",data:(r=g.message)==null?void 0:r.data}}catch(o){return console.error("❌ Registration error:",o),{success:!1,message:o.message||"Registration failed"}}}async login(e,s){var a,r,o;try{const t=new URLSearchParams;t.append("email",e),t.append("password",s);const n=`${this.baseUrl}/api/method/draped_dreams.api.auth.login_user`;console.log("🚀 Direct login to:",n);const l=await(await fetch(n,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t,credentials:"include"})).json();return{success:((a=l.message)==null?void 0:a.success)||!1,message:((r=l.message)==null?void 0:r.message)||"Login completed",data:(o=l.message)==null?void 0:o.data}}catch(t){return console.error("❌ Login error:",t),{success:!1,message:t.message||"Login failed"}}}}class S extends u{async register(e){try{const s=this.validateRegistrationData(e);if(!s.isValid)return{success:!1,message:s.message};const a=new URLSearchParams;Object.keys(e).forEach(t=>{a.append(t,e[t])});const r=`${API_CONFIG.ENDPOINTS.AUTH.REGISTER}`;console.log("Base URL:",this.baseUrl),console.log("Register URL:",r),console.log("Register data:",e),console.log("Form data:",a.toString());const o=await this.makeRequest(r,{method:"POST",headers:API_CONFIG.HEADERS.FORM_DATA,body:a});return console.log("Response result:",o),this.handleResponse(o,m.AUTH.REGISTRATION_SUCCESS)}catch(s){return console.error("Registration error:",s),{success:!1,message:i.NETWORK}}}async login(e,s){try{const a=this.validateLoginData(e,s);if(!a.isValid)return{success:!1,message:a.message};const r=new URLSearchParams;r.append("email",e),r.append("password",s);const o=`${API_CONFIG.ENDPOINTS.AUTH.LOGIN}`;console.log("Base URL:",this.baseUrl),console.log("Login URL:",o),console.log("Login data:",{email:e,password:s}),console.log("Form data:",r.toString());const t=await this.makeRequest(o,{method:"POST",headers:API_CONFIG.HEADERS.FORM_DATA,body:r});return console.log("Response result:",t),this.handleResponse(t,m.AUTH.LOGIN_SUCCESS)}catch(a){return console.error("Login error:",a),{success:!1,message:i.NETWORK}}}validateRegistrationData(e){const{first_name:s,last_name:a,email:r,phone:o,password:t,confirm_password:n}=e;return R([s,a,r,o,t,n])?s.length<c.USER.NAME_MIN_LENGTH||a.length<c.USER.NAME_MIN_LENGTH?{isValid:!1,message:"Name must be at least 2 characters"}:c.USER.EMAIL_REGEX.test(r)?o.length<c.USER.PHONE_MIN_LENGTH?{isValid:!1,message:i.VALIDATION.PHONE_INVALID}:t.length<c.USER.PASSWORD_MIN_LENGTH?{isValid:!1,message:i.VALIDATION.PASSWORD_TOO_SHORT}:t!==n?{isValid:!1,message:i.VALIDATION.PASSWORDS_DONT_MATCH}:{isValid:!0}:{isValid:!1,message:i.VALIDATION.EMAIL_INVALID}:{isValid:!1,message:i.VALIDATION.REQUIRED}}validateLoginData(e,s){return!e||!s?{isValid:!1,message:"Email and password are required"}:c.USER.EMAIL_REGEX.test(e)?s.length<c.USER.PASSWORD_MIN_LENGTH?{isValid:!1,message:i.VALIDATION.PASSWORD_TOO_SHORT}:{isValid:!0}:{isValid:!1,message:i.VALIDATION.EMAIL_INVALID}}}function R(d){return d.every(e=>e&&e.toString().trim()!=="")}const h=new S;export{h as a};
